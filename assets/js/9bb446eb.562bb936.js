"use strict";(self.webpackChunknatuerlich_docs=self.webpackChunknatuerlich_docs||[]).push([[341],{8568:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var o=t(7462),i=(t(7294),t(3905)),r=t(5851),a=t(1361);const l={},s="Overflow, Scroll, and Clipping",c={unversionedId:"getting-started/gs-scroll",id:"getting-started/gs-scroll",title:"Overflow, Scroll, and Clipping",description:'Koestlich handles clipping and scrolling for you. You only need to specify overflow "scroll" or "hidden" on any container. First, however, we need to configure react-three/fiber to support visual clipping and clipping of events, which is done via ``.',source:"@site/docs/getting-started/gs-scroll.md",sourceDirName:"getting-started",slug:"/getting-started/gs-scroll",permalink:"/koestlich/getting-started/gs-scroll",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"3D Content",permalink:"/koestlich/getting-started/gs-3d-content"},next:{title:"Custom Materials",permalink:"/koestlich/getting-started/gs-custom-mats"}},p={},d=[],g={toc:d},m="wrapper";function u(e){let{components:n,...l}=e;return(0,i.kt)(m,(0,o.Z)({},g,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overflow-scroll-and-clipping"},"Overflow, Scroll, and Clipping"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Koestlich")," handles clipping and scrolling for you. You only need to specify ",(0,i.kt)("inlineCode",{parentName:"p"},"overflow"),' "scroll" or "hidden" on any container. First, however, we need to configure react-three/fiber to support visual clipping and clipping of events, which is done via ',(0,i.kt)("inlineCode",{parentName:"p"},"<Canvas events={clippingEvents} gl={{ localClippingEnabled: true }}>"),"."),(0,i.kt)("admonition",{title:"Important",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"All components are animated by default using the ",(0,i.kt)("inlineCode",{parentName:"p"},"distanceFadeAnimation"),". For a snappy scroll experience, the animation can be disabled by providing the ",(0,i.kt)("inlineCode",{parentName:"p"},"noAnimation")," animation on the direct children of the scroll container."),(0,i.kt)("p",{parentName:"admonition"},"The following example shows a scrollable user interface using the ",(0,i.kt)("inlineCode",{parentName:"p"},"noAnimation")," property to deliver a snappy scroll experience.")),(0,i.kt)(a.w,{path:"koestlich-overflow-c9nkvc",mdxType:"CodesandboxEmbed"}),(0,i.kt)(r.Z,{img:t(2859),mdxType:"Image"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Canvas } from "@react-three/fiber";\nimport { OrbitControls } from "@react-three/drei";\nimport { RootContainer, Container, clippingEvents, noAnimation } from "@coconut-xr/koestlich";\n\nexport default function App() {\n  return (\n    <Canvas events={clippingEvents} gl={{ localClippingEnabled: true }}>\n      <OrbitControls enableRotate={false} />\n      <RootContainer\n        backgroundColor="red"\n        sizeX={2}\n        sizeY={1}\n        flexDirection="row"\n        overflow="scroll"\n      >\n        <Container animation={noAnimation}>\n          <Container width={750} margin={48} backgroundColor="green" />\n          <Container width={750} margin={48} backgroundColor="blue" />\n        </Container>\n      </RootContainer>\n    </Canvas>\n  );\n}\n')))}u.isMDXComponent=!0},2859:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});const o=t.p+"assets/images/scroll-ac984514a1975e39861f6d111759ff54.gif"}}]);