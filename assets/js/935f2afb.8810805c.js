"use strict";(self.webpackChunknatuerlich_docs=self.webpackChunknatuerlich_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"mainSidebar":[{"type":"link","label":"@coconut-xr/koestlich","href":"/koestlich/","docId":"main-doc"},{"type":"category","label":"Getting Started","collapsed":true,"collapsible":true,"items":[{"type":"link","label":"First Layout","href":"/koestlich/getting-started/gs-first-layout","docId":"getting-started/gs-first-layout"},{"type":"link","label":"Scaling & Sizing","href":"/koestlich/getting-started/gs-scaling","docId":"getting-started/gs-scaling"},{"type":"link","label":"Asynchronous Content","href":"/koestlich/getting-started/gs-async","docId":"getting-started/gs-async"},{"type":"link","label":"Text","href":"/koestlich/getting-started/gs-text","docId":"getting-started/gs-text"},{"type":"link","label":"Animations","href":"/koestlich/getting-started/gs-animations","docId":"getting-started/gs-animations"},{"type":"link","label":"3D Content","href":"/koestlich/getting-started/gs-3d-content","docId":"getting-started/gs-3d-content"},{"type":"link","label":"Overflow, Scroll, and Clipping","href":"/koestlich/getting-started/gs-scroll","docId":"getting-started/gs-scroll"},{"type":"link","label":"Custom Materials","href":"/koestlich/getting-started/gs-custom-mats","docId":"getting-started/gs-custom-mats"}],"href":"/koestlich/category/getting-started"},{"type":"link","label":"All Koestlich Components","href":"/koestlich/components","docId":"components"},{"type":"link","label":"Advanced Features","href":"/koestlich/advanced","docId":"advanced"},{"type":"link","label":"Library Development","href":"/koestlich/library-development","docId":"library-development"},{"type":"link","label":"Ecosystem - Input","href":"https://github.com/coconut-xr/input"},{"type":"link","label":"Github","href":"https://github.com/coconut-xr/koestlich"},{"type":"link","label":"Discord","href":"https://discord.gg/RbyaXJJaJM"}]},"docs":{"advanced":{"id":"advanced","title":"Advanced","description":"Classes and DefaultStyleProvider","sidebar":"mainSidebar"},"components":{"id":"components","title":"Components","description":"The koestlich components make the primitives from which more complex layout structures can be composed. All components share the default flexbox properties and event handlers. In addition, all components have properties for their individual functionality.","sidebar":"mainSidebar"},"getting-started/gs-3d-content":{"id":"getting-started/gs-3d-content","title":"3D Content","description":"The previous examples showed 2D elements positioned in the x/y plane. Integrating 3D geometries into the UI will make use of the z-Axis. In addition to having width and height, all components now have depth, which is their size on the z-Axis. All UI elements will be placed in front of their parent along the z-Axis.","sidebar":"mainSidebar"},"getting-started/gs-animations":{"id":"getting-started/gs-animations","title":"Animations","description":"Animations are built into koestlich and work out of the box. Almost all properties can be animated. In contrast to HTML/CSS, elements can transition from one place in a layout to another, a feature often referred to as AutoTransition. To declare how UI elements relate between two different layouts, the id property is used. Placing the same id property on two UI components in different layouts will keep the underlying UI element alive and automatically transition. However, both UI components need to have the same type. Therefore, it is impossible to transition an Image to a Text component.","sidebar":"mainSidebar"},"getting-started/gs-async":{"id":"getting-started/gs-async","title":"Asynchronous Content","description":"Koestlich provides Text, Image, GLTF, and SVG components, which load their content asynchronously. The components use the Suspense API from react to handle the loading state. This allows the components to be wrapped in a Suspense component to display a fallback element while loading.","sidebar":"mainSidebar"},"getting-started/gs-custom-mats":{"id":"getting-started/gs-custom-mats","title":"Custom Materials","description":"Koestlich allows to provide custom materials for the background on the Text, Container, and Image components. Using the library @coconut-xr/xmaterials, a new material can be built based on the existing three materials. Every provided material must be at least be a border material created through makeBorderMaterial. The makeBorderMaterial allows to provide default properties to the material. In the following example, we are creating a text element with a material based on the phong material with high specular and shininess. Using the border properties, we can create a border that creates the illusion of a 3d mesh. Specifically, the borderBend property allows bending the normals on the border to create this effect efficiently. The anchorX and anchorY properties allow the button in the following example to have its origin in (0,0,0).","sidebar":"mainSidebar"},"getting-started/gs-first-layout":{"id":"getting-started/gs-first-layout","title":"First Layout","description":"At first, we will create 3 containers. One container is the root node with a size of 2 by 1 three.js untits, expressed by RootContainer. The RootContainer has a horizontal (row) flex-direction, while the children expressed by Container equally fill its width with a margin between them.","sidebar":"mainSidebar"},"getting-started/gs-scaling":{"id":"getting-started/gs-scaling","title":"Scaling & Sizing","description":"TLDR: Use the optional paramters sizeX and sizeY to define a specific size of the UI in three.js units. Use pixelSize to scale the pixels units of the UI instead of increasing the size of the individual elements (normal text should have a default size of 16px like in the web).","sidebar":"mainSidebar"},"getting-started/gs-scroll":{"id":"getting-started/gs-scroll","title":"Overflow, Scroll, and Clipping","description":"Koestlich handles clipping and scrolling for you. You only need to specify overflow \\"scroll\\" or \\"hidden\\" on any container. First, however, we need to configure react-three/fiber to support visual clipping and clipping of events, which is done via ``.","sidebar":"mainSidebar"},"getting-started/gs-text":{"id":"getting-started/gs-text","title":"Text","description":"The Text component enables rendering text using multi-channel signed distance functions (MSDF). A font can be created from a .ttf file to an MSDF representation as a JSON and a corresponding texture using msdf-bmfont-xml. We provide a set of precompiled MSDF fonts from here. There you will find a list of fonts you can instantly use in your applications. In the following, a Text is rendered with the Roboto font family.","sidebar":"mainSidebar"},"library-development":{"id":"library-development","title":"Library Development","description":"We encourage developing custom component libraries on top of Koestlich. However, building custom components for evironments that are arbitrarly scaled, requires a standard for scaling. Therefore, we provide the KoestlichTestCanvas component. The KoestlichTestCanvas allows to test the scaling of a component by scaling it so that one unit unside the UI matches one pixel (based on the provided \\"pixel size\\" from the browser). This allows custom components to adhear the sizing conventions of the web.","sidebar":"mainSidebar"},"main-doc":{"id":"main-doc","title":"@coconut-xr/koestlich","description":"Version","sidebar":"mainSidebar"}}}')}}]);